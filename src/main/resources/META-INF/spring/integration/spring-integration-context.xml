<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
    xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
    xmlns:int="http://www.springframework.org/schema/integration"
    xmlns:int-twitter="http://www.springframework.org/schema/integration/twitter"
    xmlns:context="http://www.springframework.org/schema/context"
    xsi:schemaLocation="http://www.springframework.org/schema/integration
                        http://www.springframework.org/schema/integration/spring-integration-2.1.xsd
                        http://www.springframework.org/schema/beans
                        http://www.springframework.org/schema/beans/spring-beans.xsd
                        http://www.springframework.org/schema/integration/twitter
                        http://www.springframework.org/schema/integration/twitter/spring-integration-twitter-2.1.xsd
                        http://www.springframework.org/schema/context
                        http://www.springframework.org/schema/context/spring-context-3.0.xsd">

	<context:annotation-config />

  <import resource="Rabbit-Sender.xml"/>
   <import resource="applicationContext-amqp.xml"/>

<bean id="initializer" class="com.gto.aws.service.Initialize" />
<bean id="TutorialSender" class="com.gto.aws.service.JobRequestSender" />
		
		 <bean id="credentialFile" class="org.springframework.beans.factory.config.MethodInvokingFactoryBean">
   <property name="targetObject"><ref local="resource"/></property>
   <property name="targetMethod"><value>getFile</value></property>
  
 </bean>
 

  

 
 <bean id="jobRequestSender" class="com.gto.aws.service.JobRequestSender"/>
		<bean id="resource" class="org.springframework.core.io.ClassPathResource">
		<constructor-arg value="META-INF/AwsCredentials.properties"></constructor-arg>
		</bean>
		<bean id="awsCredentials" class="com.amazonaws.auth.PropertiesCredentials">
		<constructor-arg ref="credentialFile"></constructor-arg>
		</bean>
		<bean id="cloudWatchService" class="com.gto.aws.service.CloudWatchService"/>
		<bean id="jobService" class="com.gto.aws.service.JobService"/>
		<bean id="cloudWatchClient" class="com.amazonaws.services.cloudwatch.AmazonCloudWatchAsyncClient">
		<constructor-arg ref="awsCredentials"></constructor-arg>
		</bean>
		
		    <bean id="riakClient" name="riakClient" class="com.basho.riak.client.RiakFactory"
      factory-method="pbcClient">
  <constructor-arg value="i-88b704f6"/>
  <constructor-arg value="8081"/>
	</bean>


<bean id="jobRequestScheduler" class="com.gto.aws.service.JobRequestScheduler">
  <property name="jobService" ref="jobService" />
</bean>

<bean name="exampleJob" class="org.springframework.scheduling.quartz.JobDetailBean">
  <property name="jobClass" value="com.gto.aws.service.JobRequestScheduler" />
  <property name="jobDataAsMap">
    <map>
      <entry key="timeout" value="5" />
      <entry key="jobService" value-ref="jobService" />
    </map>
  </property>
</bean> 

<bean id="cronTrigger" class="org.springframework.scheduling.quartz.CronTriggerBean">
  <property name="jobDetail" ref="exampleJob"/>
	<!-- run every morning at 6 AM -->
  <property name="cronExpression" value="0 0 1 * * ?"/>
</bean>

<bean class="org.springframework.scheduling.quartz.SchedulerFactoryBean">
  <property name="triggers">
    <list>
      <ref bean="cronTrigger"/>
	 <ref bean="simpleTrigger"/>
    </list>
  </property>
</bean>

<bean id="simpleTrigger" class="org.springframework.scheduling.quartz.SimpleTriggerBean">
  <!-- see the example of method invoking job above -->
  <property name="jobDetail" ref="exampleJob"/>
	<!-- 10 seconds -->
  <property name="startDelay" value="10000"/>
	<!-- repeat every 50 seconds -->
  <property name="repeatInterval" value="20000"/>
</bean>

</beans>
